name: 'Terraform Deploy'

on:
  push:
    branches:
    - main
  workflow_dispatch:
    
permissions:
  contents: read
    
jobs:
  terraform:
    name: 'Terraform apply'
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUB_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_environment: production
    runs-on: ubuntu-latest
    environment: production
    
    # Use the Bash shell regardless of whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '>=1.1.0'
          terraform_wrapper: false
  
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -input=false

      # Apply Terraform changes
      - name: Terraform Apply
        id: tfApply
        working-directory: ./terraform
        run: |
          terraform apply -auto-approve -input=false
          app_plan = terraform output app_plan

  build_webapp:
    name: 'build_webapp'
    needs: terraform
    env:
      AZURE_WEBAPP_NAME: nateApp 
      #AZURE_WEBAPP_PACKAGE_PATH: 'my-app-path'
      NODE_VERSION: 16
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@main
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      #build test and install npm project
      - name: npm install, build, and test
        run: |
          npm install
          npm run build --if-present
          npm run test --if-present

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: node-app
          path: .
  
  deploy_webapp:
    runs-on: ubuntu-latest
    name: 'deploy_webapp'
    needs: build_webapp
    environment:
      name: 'production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v2
      with:
        name: node-app

    - name: 'Deploy to Azure WebApp'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        slot-name: 'production'
        publish-profile: ${{ steps.tfApply.outputs.app_plan }}
        package: .
